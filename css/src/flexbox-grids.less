// From https://philipwalton.github.io/solved-by-flexbox/demos/grids/
.Grid {
	display: flex;
	flex-wrap: wrap;
	list-style: none;
	margin: 0;
	padding: 0;
	* {
		box-sizing: border-box;
	}
}

.Grid-cell {
	flex: 1;
}

.Grid--flexCells > .Grid-cell {
	display: flex;
}

.Grid--top {
	align-items: flex-start;
}

.Grid--bottom {
	align-items: flex-end;
}

.Grid--fill-height {
	flex-direction: column;
	justify-content: space-between;
	height: 100%;
	& > .Grid-cell {
		flex-grow: inherit;
	}
}

.Grid--nowrap {
	flex-wrap: nowrap;
}

.Grid--center {
	align-items: center;
}

.Grid--justifyCenter {
	justify-content: center;
}

.Grid-cell--top {
	align-self: flex-start;
}

.Grid-cell--bottom {
	align-self: flex-end;
}

.Grid-cell--center {
	align-self: center;
}

.Grid-cell--centerContent {
	text-align: center;
	img {
		display: block;
		margin-left: auto;
		margin-right: auto;
		clear: both;
	}
}

.Grid-cell--autoSize {
	flex: none;
}

.Grid--fit > .Grid-cell {
	flex: 1;
}

.Grid--full > .Grid-cell {
	flex: 0 0 100%;
}

.Grid--1of2 > .Grid-cell {
	flex: 0 0 auto;
	width: 50%;
}

.Grid--1of3 > .Grid-cell {
	flex: 0 0 auto;
	width: 33.3%
}

.Grid--1of4 > .Grid-cell {
	flex: 0 0 auto;
	width: 25%;
}
.Grid-cell .inset-contents {
	// width: 100%;
	height: 100%;
	padding: 0.8em 1em 0px;
}

.Grid-cell > .Grid-cell-100pc {
	width: 100%;
}

@media (min-width:24em) {
	.small-Grid--fit > .Grid-cell {
		flex: 1;
	}
	.small-Grid--full > .Grid-cell {
		flex: 0 0 100%;
	}
	.small-Grid--1of2 > .Grid-cell {
		flex: 0 0 auto;
		width: 50%;
	}
	.small-Grid--1of3 > .Grid-cell {
		flex: 0 0 auto;
		width: 33.3%;
	}
	.small-Grid--1of3 > .Grid-cell.u-2of3 {
		flex: 0 0 auto;
		width: 66.6%;
	}
	.small-Grid--1of4 > .Grid-cell {
		flex: 0 0 auto;
		width: 25%;
	}
	.small-Grid--1of4 > .Grid-cell.u-2of4 {
		flex: 0 0 auto;
		width: 50%;
	}
	.small-Grid--1of4 > .Grid-cell.u-3of4 {
		flex: 0 0 auto;
		width: 75%;
	}
	// Alternate version allows for some flex.
	// Choose the break point by specifying the small, medium, large
	// Then only specify some cell sizes, rest can be auto.
	.small-Grid,
	.small-Grid--fit {
		> .Grid-cell.u-1of3 {
			flex: 0 0 auto;
			width: 33.3%;
		}
		> .Grid-cell.u-2of3 {
			flex: 0 0 auto;
			width: 66.6%;
		}
		> .Grid-cell.u-1of4 {
			flex: 0 0 auto;
			width: 25%;
		}
		> .Grid-cell.u-2of4 {
			flex: 0 0 auto;
			width: 50%;
		}
		> .Grid-cell.u-3of4 {
			flex: 0 0 auto;
			width: 75%;
		}
	}
}

@media (min-width:36em) {
	.med-Grid--fit > .Grid-cell {
		flex: 1;
	}
	.med-Grid--full > .Grid-cell {
		flex: 0 0 100%;
	}
	.med-Grid--1of2 > .Grid-cell {
		flex: 0 0 auto;
		width: 50%;
	}
	.med-Grid--1of3 > .Grid-cell {
		flex: 0 0 auto;
		width: 33.3%;
	}
	.med-Grid--1of3 > .Grid-cell.u-2of3 {
		flex: 0 0 auto;
		width: 66.6%;
	}
	.med-Grid--1of4 > .Grid-cell {
		flex: 0 0 auto;
		width: 25%;
	}
	.med-Grid--1of4 > .Grid-cell.u-2of4 {
		flex: 0 0 auto;
		width: 50%;
	}
	.med-Grid--1of4 > .Grid-cell.u-3of4 {
		flex: 0 0 auto;
		width: 75%;
	}
	// Alternate version allows for some flex.
	// Choose the break point by specifying the small, medium, large
	// Then only specify some cell sizes, rest can be auto.
	.med-Grid,
	.med-Grid--fit {
		> .Grid-cell.u-1of3 {
			flex: 0 0 auto;
			width: 33.3%;
		}
		> .Grid-cell.u-2of3 {
			flex: 0 0 auto;
			width: 66.6%;
		}
		> .Grid-cell.u-1of4 {
			flex: 0 0 auto;
			width: 25%;
		}
		> .Grid-cell.u-2of4 {
			flex: 0 0 auto;
			width: 50%;
		}
		> .Grid-cell.u-3of4 {
			flex: 0 0 auto;
			width: 75%;
		}
	}

	// Allow the quarter blocks to stack 2-up.
	// this is hinky, the math doesn't work out.
	.large-Grid--1of4 > .Grid-cell {
		flex: 0 0 auto;
		width: 50%;
		img {
			width: 100%;
		}
	}
	// Alt version
	.large-Grid > .Grid-cell.u-1of4 {
		flex: 0 0 auto;
		width: 50%;
	}

}

@media (min-width:48em) {
	.large-Grid--fit > .Grid-cell {
		flex: 1;
	}
	.large-Grid--full > .Grid-cell {
		flex: 0 0 100%;
	}
	.large-Grid--1of2 > .Grid-cell {
		flex: 0 0 auto;
		width: 50%;
	}
	.large-Grid--1of3 > .Grid-cell {
		flex: 0 0 auto;
		width: 33.3%; // For IE 10 & 11 compatibility.
	}
	.large-Grid--1of3 > .Grid-cell.u-2of3 {
		flex: 0 0 auto;
		width: 66.6%;
	}
	.large-Grid--1of4 > .Grid-cell {
		// There's a bug in IE 10 and 11 that causes the flex-basis to calculate in a content-box world.
		// See https://github.com/philipwalton/flexbugs#7-flex-basis-doesnt-account-for-box-sizingborder-box
		// flex: 0 0 25%; <-- This is the "normal" flexbox approach
		flex: 0 0 auto; // This plus the explicit width works with IE 10 & 11.
		width: 25%;
	}
	.large-Grid--1of4 > .Grid-cell.u-2of4 {
		flex: 0 0 auto;
		width: 50%;
	}
	.large-Grid--1of4 > .Grid-cell.u-3of4 {
		flex: 0 0 auto;
		width: 75%;
	}

	// Alternate version allows for some flex.
	// Choose the break point by specifying the small, medium, large
	// Then only specify some cell sizes, rest can be auto.
	.large-Grid,
	.large-Grid--fit {
		> .Grid-cell.u-1of3 {
			flex: 0 0 auto;
			width: 33.3%;
		}
		> .Grid-cell.u-2of3 {
			flex: 0 0 auto;
			width: 66.6%;
		}
		> .Grid-cell.u-1of4 {
			flex: 0 0 auto;
			width: 25%;
		}
		> .Grid-cell.u-2of4 {
			flex: 0 0 auto;
			width: 50%;
		}
		> .Grid-cell.u-3of4 {
			flex: 0 0 auto;
			width: 75%;
		}
	}
}

@media (min-width:60em) {
	.xl-Grid--fit > .Grid-cell {
		flex: 1;
	}
	.xl-Grid--full > .Grid-cell {
		flex: 0 0 100%;
	}
	.xl-Grid--1of2 > .Grid-cell {
		flex: 0 0 auto;
		width: 50%;
	}
	.xl-Grid--1of3 > .Grid-cell {
		flex: 0 0 auto;
		width: 33.3%; // For IE 10 & 11 compatibility.
	}
	.xl-Grid--1of3 > .Grid-cell.u-2of3 {
		flex: 0 0 auto;
		width: 66.6%;
	}
	.xl-Grid--1of4 > .Grid-cell {
		// There's a bug in IE 10 and 11 that causes the flex-basis to calculate in a content-box world.
		// See https://github.com/philipwalton/flexbugs#7-flex-basis-doesnt-account-for-box-sizingborder-box
		// flex: 0 0 25%; <-- This is the "normal" flexbox approach
		flex: 0 0 auto; // This plus the explicit width works with IE 10 & 11.
		width: 25%;
	}
	.xl-Grid--1of4 > .Grid-cell.u-2of4 {
		flex: 0 0 auto;
		width: 50%;
	}
	.xl-Grid--1of4 > .Grid-cell.u-3of4 {
		flex: 0 0 auto;
		width: 75%;
	}

	// Alternate version allows for some flex.
	// Choose the break point by specifying the small, medium, xl
	// Then only specify some cell sizes, rest can be auto.
	.xl-Grid,
	.xl-Grid--fit {
		> .Grid-cell.u-1of3 {
			flex: 0 0 auto;
			width: 33.3%;
		}
		> .Grid-cell.u-2of3 {
			flex: 0 0 auto;
			width: 66.6%;
		}
		> .Grid-cell.u-1of4 {
			flex: 0 0 auto;
			width: 25%;
		}
		> .Grid-cell.u-2of4 {
			flex: 0 0 auto;
			width: 50%;
		}
		> .Grid-cell.u-3of4 {
			flex: 0 0 auto;
			width: 75%;
		}
	}
}

.Grid--gutters {
	margin: -1em 0 1em -1em;
	> .Grid-cell {
		padding: 1em 0 0 1em;
	}
}
.Grid--guttersLg {
	margin: -1.5em 0 1.5em -1.5em;
	> .Grid-cell {
		padding: 1.5em 0 0 1.5em;
	}
}
.Grid--guttersXl {
	margin: -2em 0 2em -2em;
	> .Grid-cell {
		padding: 2em 0 0 2em;
	}
}

@media (min-width:24em) {
	.small-Grid--gutters {
		margin: -1em 0 1em -1em;
		> .Grid-cell {
			padding: 1em 0 0 1em;
		}
	}
	.small-Grid--guttersLg {
		margin: -1.5em 0 1.5em -1.5em;
		> .Grid-cell {
			padding: 1.5em 0 0 1.5em;
		}
	}
	.small-Grid--guttersXl {
		margin: -2em 0 2em -2em;
		> .Grid-cell {
			padding: 2em 0 0 2em;
		}
	}
}

@media (min-width:36em) {
	.med-Grid--gutters {
		margin: -1em 0 1em -1em;
		> .Grid-cell {
			padding: 1em 0 0 1em;
		}
	}
	.med-Grid--guttersLg {
		margin: -1.5em 0 1.5em -1.5em;
		> .Grid-cell {
			padding: 1.5em 0 0 1.5em;
		}
	}
	.med-Grid--guttersXl {
		margin: -2em 0 2em -2em;
		> .Grid-cell {
			padding: 2em 0 0 2em;
		}
	}
}

@media (min-width:48em) {
	.large-Grid--gutters {
		margin: -1em 0 1em -1em;
		> .Grid-cell {
			padding: 1em 0 0 1em;
		}
	}
	.large-Grid--guttersLg {
		margin: -1.5em 0 1.5em -1.5em;
		> .Grid-cell {
			padding: 1.5em 0 0 1.5em;
		}
	}
	.large-Grid--guttersXl {
		margin: -2em 0 2em -2em;
		> .Grid-cell {
			padding: 2em 0 0 2em;
		}
	}
}

@media (min-width:60em) {
	.xl-Grid--gutters {
		margin: -1em 0 1em -1em;
		> .Grid-cell {
			padding: 1em 0 0 1em;
		}
	}
	.xl-Grid--guttersLg {
		margin: -1.5em 0 1.5em -1.5em;
		> .Grid-cell {
			padding: 1.5em 0 0 1.5em;
		}
	}
	.xl-Grid--guttersXl {
		margin: -2em 0 2em -2em;
		> .Grid-cell {
			padding: 2em 0 0 2em;
		}
	}
}

.Media {
	display: flex;
	align-items: flex-start;
	margin-bottom: 1em;
}
.Media-figure {
	margin-right: 1em;
	&.spacious {
		margin-right: 2em;
	}
}
.Media-body {
	flex: 1;
}
.Media-body,
.Media-body :last-child {
	margin-bottom: 0;
}
.Media-title {
	margin: 0 0 .5em;
}
.Media--center {
	align-items: center;
}
.Media--reverse > .Media-figure {
	order: 1;
	margin: 0 0 0 1em;
	&.spacious {
		margin: 0 0 0 2em;
	}
}

@media (min-width:36em) {
	.Media-figure.spacious {
		margin-right: 2em;
	}
	.Media--reverse > .Media-figure.spacious {
		margin: 0 0 0 2em;
	}
}

// Flexbox isn't useful in anything earlier than IE10
.ie7, .ie8, .ie9 {
	.Grid {
		display: block;
		// flex-wrap: wrap;
		// list-style: none;
		// margin: 0;
		// padding: 0;
	}

	.Grid-cell {
		display: block;
		float: left;
		// clear: left;
		width: 30%;
		margin: 0 0 1em 1em;
	}

	// These should act like quarter blocks.
	.large-Grid--1of4 {
		.Grid-cell {
			margin-right: 2%;
			margin-left: 2%;
			width: 20.9%;
		}
	}

	// These should stack.
	.Grid--fill-height {
		.Grid-cell {
			width: 100%;
			clear: left;
		}
	}
}
